{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Docs Chavinci","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#overview","title":"Overview","text":"<p>Chavinci is modern blockchain platform designed for token creation, transfer and exchange.</p>"},{"location":"#key-features","title":"Key features","text":"<p>While being based on Bitcoin it utilises Proof-of-Stake and native token cration protocol which allow peoples to exchange tokens between each other using atomic swaps.</p>"},{"location":"about/","title":"Welcome to Blog Chavinci","text":""},{"location":"atomic/","title":"Atomic swaps","text":"<p>Or, trading apples for bananas.</p>"},{"location":"atomic/#the-problem","title":"The Problem","text":"<p>Andy has some apples.  Barb has some bananas.  Andy agrees to give Barb two apples in exchange for one banana.  In order to make sure both parties hold up their end of the deal they need to create a single transaction that sends assets both directions.</p>"},{"location":"atomic/#the-inputs","title":"The Inputs","text":"<p>We'll need to find 3 UTXOs to use as inputs.  Andy's apples, Barb's bananas and some Chavinci to pay the network fee (Andy will pay).</p> <p>Andy uses <code>listunspent</code> to find a suitable <code>txid</code> and <code>vout</code>:</p> <pre><code>\ufeff{\n  \"txid\": \"73cff8d5595d9134841e252aa95a01a408cc1473cc8ef590cdd81e819e62fccc\",\n  \"vout\": 1,\n  \"address\": \"Kj6iUJQvVZrd4wxeijebcivC6a4Y53qVgR\",\n  \"scriptPubKey\": \"21027e1fde02d2cbfac3629aeaf669abd156d0c4dfbf52f6a5e4dd6664e81a621045ac\",\n  \"amount\": 1,\n  \"confirmations\": 3088,\n  \"spendable\": true,\n  \"solvable\": true,\n  \"safe\": true\n}\n</code></pre> <p>Then each party uses <code>listmyassets</code> with <code>verbose=true</code> to find asset UTXOs:</p> <p>Andy: <code>listmytokens APPLES true</code>:</p> <pre><code>{\n  \"APPLES\": {\n    \"balance\": 1000,\n    \"outpoints\": [\n      {\n        \"txid\": \"744c61abe6d237939c3567bc44b912ff4c375984229908c964be44f36dec79e3\",\n        \"vout\": 3,\n        \"amount\": 1000\n      }\n    ]\n  }\n}\n</code></pre> <p>Barb: <code>listmytokens BANANAS true</code>:</p> <pre><code>{\n  \"BANANAS\": {\n    \"balance\": 1000,\n    \"outpoints\": [\n      {\n        \"txid\": \"8468ef5193b1f5d6a7bd501f5f8ef5aec7c3d86fa87cec5a0b6f6d86fba78a4f\",\n        \"vout\": 3,\n        \"amount\": 1000\n      }\n    ]\n  }\n}\n</code></pre> <p>Extracting the txids and vouts gives us our raw inputs: <code>'[{\"txid\":\"73cff8d5595d9134841e252aa95a01a408cc1473cc8ef590cdd81e819e62fccc\",\"vout\":1}, \\    {\"txid\":\"744c61abe6d237939c3567bc44b912ff4c375984229908c964be44f36dec79e3\",\"vout\":3}, \\    {\"txid\":\"8468ef5193b1f5d6a7bd501f5f8ef5aec7c3d86fa87cec5a0b6f6d86fba78a4f\",\"vout\":3}]'</code></p>"},{"location":"atomic/#the-outputs","title":"The Outputs","text":"<p>We'll be using 5 new Chavinci addresses:</p> <p>Andy's Raven change address: <code>KZzymtqctNdW4fWhLdWKRYUDGXP3KzG8Y9</code></p> <p>Andy's banana receive address: <code>KiNMHYArytp2D6jQSPHrGd7rq3qAxvpdt5</code></p> <p>Barb's banana change address: <code>KdahQMGWTJgFjziWadqejMU7gYAvpumzkk</code></p> <p>Barb's apple receive address: <code>KtPia5TPzjw1XibYh3de3RKxcpq9gusCBu</code></p> <p>Andy's apple change address: <code>KeW8oMzwyQZbgME9Tm633TDRV8bW347tEM</code></p> <p>All asset transfers have to be balanced.  Since we have 1000 APPLES coming in, we have to have 1000 going out.  So Andy will send 2 to Barb's receive address and the rest (998) to his change address.  The Chavinci will pay 0.001 for the network fee as normal.</p> <p><code>'{\"KZzymtqctNdW4fWhLdWKRYUDGXP3KzG8Y9\":4.8827125, \\   \"KiNMHYArytp2D6jQSPHrGd7rq3qAxvpdt5\":{\"transfer\":{\"BANANAS\":1}}, \\   \"KdahQMGWTJgFjziWadqejMU7gYAvpumzkk\":{\"transfer\":{\"BANANAS\":999}}, \\   \"KtPia5TPzjw1XibYh3de3RKxcpq9gusCBu\":{\"transfer\":{\"APPLES\":2}}, \\   \"KeW8oMzwyQZbgME9Tm633TDRV8bW347tEM\":{\"transfer\":{\"APPLES\":998}}}'</code></p>"},{"location":"atomic/#creating-the-transaction","title":"Creating The Transaction","text":"<p>Andy can now use <code>createrawtransaction</code>, passing in the inputs and outputs and receiving the transaction hex:</p> <pre><code>createrawtransaction '[{\"txid\":\"631cf1566165803f0b89fbfb169d8f0c89129ec3f8536a48e4c4f0f3c4081cff\",\"vout\":0},{\"txid\":\"744c61abe6d237939c3567bc44b912ff4c375984229908c964be44f36dec79e3\",\"vout\":3},{\"txid\":\"8468ef5193b1f5d6a7bd501f5f8ef5aec7c3d86fa87cec5a0b6f6d86fba78a4f\",\"vout\":3}]' '{\"KZzymtqctNdW4fWhLdWKRYUDGXP3KzG8Y9\":4.8827125,\"KiNMHYArytp2D6jQSPHrGd7rq3qAxvpdt5\":{\"transfer\":{\"BANANAS\":1}},\"KdahQMGWTJgFjziWadqejMU7gYAvpumzkk\":{\"transfer\":{\"BANANAS\":999}},\"KtPia5TPzjw1XibYh3de3RKxcpq9gusCBu\":{\"transfer\":{\"APPLES\":2}},\"KeW8oMzwyQZbgME9Tm633TDRV8bW347tEM\":{\"transfer\":{\"APPLES\":998}}}'\n</code></pre> <pre><code>0200000003ff1c08c4f3f0c4e4486a53f8c39e12890c8f9d16fbfb890b3f80656156f11c630000000000ffffffffe379ec6df344be64c90899228459374cff12b944bc67359c9337d2e6ab614c740300000000ffffffff4f8aa7fb866d6f0b5aec7ca86fd8c3c7aef58e5f1f50bda7d6f5b19351ef68840300000000ffffffff05926d1a1d000000001976a914a1d62b4f8a6710ad43d56f656c27966513ae8fbf88ac00000000000000003076a91483b7a59ce25d8159fdc2ab70320512d2bc07a1c488acc01472766e740742414e414e415300e1f505000000007500000000000000003076a91430f446c2ac37dc072516603e44e86aea7af2bf6788acc01472766e740742414e414e415300078142170000007500000000000000002f76a914cf084a93cf87d3030b74a1939d9c8f02f6152c8c88acc01372766e74064150504c455300c2eb0b000000007500000000000000002f76a914d18967e005ff7208cc6a9c483b028c7c72ca2d6e88acc01372766e74064150504c455300268b3c170000007500000000\n</code></pre>"},{"location":"atomic/#signing-the-transaction","title":"Signing The Transaction","text":"<p>Ok, the structure of the transaction is set.  Now each party needs to sign it in order to unlock the inputs.  Here are the steps:</p> <ul> <li>Andy signs it using <code>signrawtransaction</code>.  This will alter the hex, using his wallet to insert the signatures.</li> </ul> <p>Note: Since Andy doesn't have the keys for all of the inputs he will see an error: <code>\"Unable to sign input, invalid stack size (possibly missing key)\" This is normal and expected.</code></p> <ul> <li>Andy sends the signed hex to Barb.</li> <li>Barb uses <code>signrawtransaction</code> to sign the rest of the inputs.  Again capture the hex output.</li> </ul>"},{"location":"atomic/#submit-the-transaction","title":"Submit The Transaction","text":"<p>Almost there.  Barb now passes the fully signed hex to <code>sendrawtransaction</code>!  It will be communicated to the network and put into the next block.</p>"},{"location":"deneme/","title":"Running A Full Node - Bitcoin","text":"# Running A Full Node <p>Support the Bitcoin network by running your own full node</p> ALL TOPICS   * Table of contents {:toc}  <ul><li>Report An Issue</li></ul> <ul><li>Edit On GitHub</li></ul>   ## What Is A Full Node?  A full node is a program that fully validates transactions and blocks. Almost all full nodes also help the network by accepting transactions and blocks from other full nodes, validating those transactions and blocks, and then relaying them to further full nodes.  Most full nodes also serve lightweight clients by allowing them to transmit their transactions to the network and by notifying them when a transaction affects their wallet. If not enough nodes perform this function, clients won't be able to connect through the peer-to-peer network---they'll have to use centralized services instead.  Many people and organizations volunteer to run full nodes using spare computing and bandwidth resources---but more volunteers are needed to allow Bitcoin to continue to grow.  This document describes how you can help and what helping will cost you.    ## Setup a Full Node     ## Costs And Warnings  Running a Bitcoin full node comes with certain costs and can expose you to certain risks. This section will explain those costs and risks so you can decide whether you're able to help the network.  ### Special Cases  Miners, businesses, and privacy-conscious users rely on particular behavior from the full nodes they use, so they will often run their own full nodes and take special safety precautions. This document does not cover those precautions---it only describes running a full node to help support the Bitcoin network in general.  Please seek out assistance in the [community](/en/community) if you need help setting up your full node correctly to handle high-value and privacy-sensitive tasks. Do your own diligence to ensure who you get help from is ethical, reputable and qualified to assist you.  ### Secure Your Wallet  It's possible and safe to run a full node to support the network and use its wallet to store your bitcoins, but you must take the same precautions you would when using any Bitcoin wallet.  Please see the [securing your wallet page](/en/secure-your-wallet) for more information.  ### Minimum Requirements  Bitcoin Core full nodes have certain requirements. If you try running a node on weak hardware, it may work---but you'll likely spend more time dealing with issues. If you can meet the following requirements, you'll have an easy-to-use node.  * Desktop or laptop hardware running recent versions of Windows, Mac OS   X, or Linux.  * {{site.text.bitcoin_datadir_gb_pruned}} gigabytes of free disk space,   accessible at a minimum read/write speed of 100 MB/s.  * 2 gigabytes of memory (RAM)  * A broadband Internet connection with upload speeds of at least 400   kilobits (50 kilobytes) per second  * An unmetered connection, a connection with high upload limits, or a   connection you regularly monitor to ensure it doesn't exceed its   upload limits. It's common for full nodes on high-speed connections to   use 200 gigabytes upload or more a month. Download usage is around 20   gigabytes a month, plus around an additional {{site.text.chain_gb}} gigabytes the first   time you start your node.  * 6 hours a day that your full node can be left running. (You can do   other things with your computer while running a full node.)   More hours would be better, and best of all would be if you can run   your node continuously.      **Note:** many operating systems today (Windows, Mac, and Linux) enter a     low-power mode after the screensaver activates, slowing or halting     network traffic. This is often the default setting on laptops and on     all Mac OS X laptops and desktops. Check your screensaver settings     and disable automatic \"sleep\" or \"suspend\" options to ensure you     support the network whenever your computer is running.  ### Possible Problems  {% include bitcoin-core/bitcoin-core-possible-problems.md %}    ## Initial Block Download(IBD)  [Initial block download](https://developer.bitcoin.org/devguide/p2p_network.html#initial-block-download) refers to the process where nodes synchronize themselves to the network by downloading blocks that are new to them. This will happen when a node is far behind the tip of the [best block chain](https://developer.bitcoin.org/glossary.html). In the process of IBD, a node does not accept incoming transactions nor request mempool transactions.  If you are trying to set up a new node following the instructions below, you will go through the IBD process at the first run, and it may take a considerable amount of time since a new node has to download the entire block chain (which is roughly {{site.text.chain_gb}} gigabytes now). During the download, there could be a high usage for the network and CPU (since the node has to verify the blocks downloaded), and the client will take up an increasing amount of storage space ([reduce storage](#reduce-storage) provides more details on reducing storage).  Before the node finishes IBD, you will not be able to see a new transaction related to your account until the client has caught up to the block containing that transaction. So your wallet may not count new payments/spendings into the balance.  If you are using Bitcoin Core GUI, you can monitor the progress of IBD in the status bar (left bottom corner).  ![Bitcoin-Qt Initial Block Download](/img/full-node/en-bitcoin-qt-ibd.png?{{site.time | date: '%s'}})  ## Linux Instructions  The following instructions describe installing Bitcoin Core using tools available in most mainstream Linux distributions.  We assume you use a Bourne-like shell such as `bash`.  Using any computer, go to the [Bitcoin Core download page](https://bitcoin.org/en/download) and verify you have made a secure connection to the server.  ![Verify secure connection](/img/full-node/en-secure-connection.png?{{site.time | date: '%s'}})  In the \"Linux (tgz)\" section of the Download page, choose the appropriate file for your Linux install (either 32-bit or 64-bit) and download the file. If necessary, move the file to the computer you want to use to run Bitcoin Core.  {{verifyReleaseSignatures}}  If you aren't already logged into the computer you want to install Bitcoin on, login now.  Make sure you use an account that can use `su` or `sudo` to install software into directories owned by the root user.  If you logged in graphically, start a terminal.  If you logged in another way, we will assume you're already in a shell.  Locate the file you downloaded and extract it using the `tar` command followed by the argument `xzf` followed by the file name. The argument `xzf` means eXtract the gZipped tar archive File. For example, for a 64-bit tar archive in your current directory, the command is:      tar xzf bitcoin-{{site.DOWNLOAD_VERSION}}-x86_64-linux-gnu.tar.gz  This will create the directory `bitcoin-{{site.DOWNLOAD_VERSION}}` within your current working directory. We will install the contents of its `bin` subdirectory into the `/usr/local/bin` directory using the the `install` command. The install command is part of the GNU coreutils available on nearly every Linux distribution, and the `/usr/local/bin` directory is a standard location for self-installed executables (you may edit the commands below to use a different location).  If you use `sudo` to run commands as root, use the following command line:      sudo install -m 0755 -o root -g root -t /usr/local/bin bitcoin-{{site.DOWNLOAD_VERSION}}/bin/*  If you use `su` to run commands as root, use the following command line:      su -c 'install -m 0755 -o root -g root -t /usr/local/bin bitcoin-{{site.DOWNLOAD_VERSION}}/bin/*'   *To continue, choose one of the following options*  1. To use Bitcoin Core Graphical User Interface (GUI), proceed to the    [Bitcoin Core GUI](#other-linux-gui) section below.  2. To use the Bitcoin Core daemon (bitcoind), which is useful for    programmers and advanced users, proceed to the [Bitcoin Core    Daemon](#other-linux-daemon) section below.  3. To use both the GUI and the daemon, read both the [GUI    instructions](#other-linux-gui) and the [daemon    instructions](#other-linux-daemon). Note that you can't run both the    GUI and the daemon at the same time using the same configuration    directory.    ### Bitcoin Core GUI {#other-linux-gui}  In order to use Bitcoin Core GUI, you will need several libraries installed. All of them should be available in all major recently-released Linux distributions, but they may not be installed on your computer yet. To determine whether you're missing any libraries, open a terminal (if you haven't already) and run the command `/usr/local/bin/bitcoin-qt` to start Bitcoin Core GUI.  If all the required libraries are installed, Bitcoin Core will start. If a required library is missing, an error message similar to the following message will be displayed:      /usr/local/bin/bitcoin-qt: error while loading shared libraries: libQtGui.so.4: cannot open shared object file: No such file or directory  Search your distribution's package database for the missing file missing and install package containing that file.  Then re-run `/usr/local/bin/bitcoin-qt` to see if it's missing another file. Repeat until Bitcoin Core GUI starts.  You will be prompted to choose a directory to store the Bitcoin block chain and your wallet.  Unless you have a separate partition or drive you want to use, click *Ok* to use the default.  ![Bitcoin-Qt Welcome](/img/full-node/en-bitcoin-qt-welcome.png?{{site.time | date: '%s'}})  Bitcoin Core GUI will begin to download the block chain.  This step will take at least several days, and it may take much more time on a slow Internet connection or with a slow computer.  During the download, Bitcoin Core will use a significant part of your connection bandwidth.  You can stop Bitcoin Core at any time by closing it; it will resume from the point where it stopped the next time you start it.  ![Bitcoin-Qt Initial Block Download](/img/full-node/en-bitcoin-qt-ibd.png?{{site.time | date: '%s'}})  After download is complete, you may use Bitcoin Core as your wallet or you can just let it run to help support the Bitcoin network.   *Optional: Start Your Node At Login*  Starting your node automatically each time you login to your computer makes it easy for you to contribute to the network. The easiest way to do this is to tell Bitcoin Core GUI to start at login. This only works in desktop environments that support the [autostart specification](http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html#startup), such as Gnome, KDE, and Unity.  While running Bitcoin Core GUI, open the Settings menu and choose Options.  On the Main tab, click *Start Bitcoin on system login*.  Click the Ok button to save the new settings.  ![Choosing to start Bitcoin Core at login](/img/full-node/en-start-on-login.png?{{site.time | date: '%s'}})  The next time you login to your desktop, Bitcoin Core GUI should be automatically started as an icon in the tray.  ![Bitcoin-Qt Tray Icon](/img/full-node/en-bitcoin-qt-tray-icon.png?{{site.time | date: '%s'}})  If Bitcoin Core GUI does not automatically start, you may need to add it to an `.xinit` or `.xsession` file as [described here](https://en.wikibooks.org/wiki/Guide_to_X11/Starting_Sessions).   {{installFinished}}  ### Bitcoin Core Daemon {#other-linux-daemon}  If you're logged in as an administrative user with sudo access, you may log out.  The steps in this section should be performed as the user you want to run Bitcoin Core.  (This can be a locked account used only by Bitcoin Core.)  If you changed users in a graphical interface, start a terminal.  Type the following command:      bitcoind -daemon  It will print a message that Bitcoin Core is starting.  To interact with Bitcoin Core daemon, you will use the command `bitcoin-cli` (Bitcoin command line interface). {{start_up_and_recommended_commands}}  For example, to safely stop your node, run the following command:      bitcoin-cli stop  {{complete_list_of_commands_and_ibd}}   *Optional: Start Your Node At Boot*  Starting your node automatically each time your computer boots makes it easy for you to contribute to the network.  The easiest way to do this is to start Bitcoin Core daemon from your crontab.  To edit your crontab on most distributions, run the following command:      crontab -e  Scroll to the bottom of the file displayed and add the following line:      @reboot bitcoind -daemon  Save the file and exit; the updated crontab file will be installed for you. On most distributions, this will cause Bitcoin Core daemon to be automatically started each time you reboot your computer.  If you're a expert system administrator and want to use an init script instead, see [the init scripts directory in Bitcoin Core's source tree](https://github.com/bitcoin/bitcoin/tree/master/contrib/init).   {{installFinished}}    ## Windows Instructions  ### Windows 10  Go to the [Bitcoin Core download page](https://bitcoin.org/en/download) and verify you have made a secure connection to the server.  ![Verify secure connection](/img/full-node/en-win10-secure-connection.png?{{site.time | date: '%s'}})  Click the large blue *Download Bitcoin Core* button to download the Bitcoin Core installer to your desktop.  {{verifyReleaseSignatures}}  After downloading the file to your desktop or your Downloads folder (`C:\\Users\\\\Downloads`), run it by double-clicking its icon. Windows will ask you to confirm that you want to run it. Click Yes and the Bitcoin installer will start.  It's a typical Windows installer, and it will guide you through the decisions you need to make about where to install Bitcoin Core.  ![Windows 10 installer start](/img/full-node/en-win10-installer-start.png?{{site.time | date: '%s'}})   *To continue, choose one of the following options*  1. If you want to use the Bitcoin Core Graphical User Interface (GUI),    proceed to the [Bitcoin Core GUI](#win10-gui) section below.  2. If you want to use the Bitcoin Core daemon (bitcoind), which is    useful for programmers and advanced users, proceed to the [Bitcoin    Core Daemon](#win10-daemon) section below.  3. If you want to use both the GUI and the daemon, read both the [GUI    instructions](#win10-gui) and the [daemon    instructions](#win10-daemon). Note that you can't run both the GUI    and the daemon at the same time using the same configuration    directory.    #### Bitcoin Core GUI {#win10-gui} {:.no_toc}  Press the Windows key (`\u229e Win`) and start typing \"bitcoin\".  When the Bitcoin Core icon appears (as shown below), click on it.  ![Starting Bitcoin Core](/img/full-node/en-win10-start-bitcoin-core.png?{{site.time | date: '%s'}})  You will be prompted to choose a directory to store the Bitcoin block chain and your wallet.  Unless you have a separate partition or drive you want to use, click Ok to use the default.  ![Bitcoin-Qt Welcome](/img/full-node/en-win10-welcome-to-bitcoin-core.png?{{site.time | date: '%s'}})  Your firewall may block Bitcoin Core from making outbound connections. It's safe to allow Bitcoin Core to use all networks. (Note: you will still need to configure inbound connections as described later in the [Network Configuration](#network-configuration) section.)  ![Opening outgoing firewall for Bitcoin Core](/img/full-node/en-win10-bitcoin-core-outgoing-firewall.png?{{site.time | date: '%s'}})  Bitcoin Core GUI will begin to download the block chain.  This step will take at least several days, and it may take much more time on a slow Internet connection or with a slow computer.  During the download, Bitcoin Core will use a significant part of your connection bandwidth.  You can stop Bitcoin Core at any time by closing it; it will resume from the point where it stopped the next time you start it.  ![Bitcoin-Qt Initial Block Download](/img/full-node/en-win10-ibd.png?{{site.time | date: '%s'}})  After download is complete, you may use Bitcoin Core as your wallet or you can just let it run to help support the Bitcoin network.   *Optional: Start Your Node At Login*  Starting your node automatically each time you login to your computer makes it easy for you to contribute to the network. The easiest way to do this is to tell Bitcoin Core GUI to start at login.  While running Bitcoin Core GUI, open the Settings menu and choose Options.  On the Main tab, click *Start Bitcoin on system login*.  Click the Ok button to save the new settings.  ![Choosing to start Bitcoin Core at login](/img/full-node/en-win10-start-on-login.png?{{site.time | date: '%s'}})  The next time you login to your desktop, Bitcoin Core GUI will be automatically started minimized in the task bar.  {{windows_shutdown_warning}}   {{installFinished}}   #### Bitcoin Core Daemon {#win10-daemon} {:.no_toc}  To start Bitcoin Core daemon, first open a command window: press the Windows key (`\u229e Win`) and type \"cmd\".  Choose the option labeled \"Command Prompt\".  ![Running cmd](/img/full-node/en-win10-running-cmd.png?{{site.time | date: '%s'}})  If you installed Bitcoin Core into the default directory, type the following at the command prompt:      C:\\Program Files\\Bitcoin\\daemon\\bitcoind  Bitcoin Core daemon should start. To interact with Bitcoin Core daemon, you will use the command `bitcoin-cli` (Bitcoin command line interface).  If you installed Bitcoin Core into the default location, type the following at the command prompt to see whether it works:      C:\\Program Files\\Bitcoin\\daemon\\bitcoin-cli getblockchaininfo  {{start_up_and_recommended_commands}}  For example, to safely stop your node, run the following command:      C:\\Program Files\\Bitcoin\\daemon\\bitcoin-cli stop  {{complete_list_of_commands_and_ibd}}   *Optional: Start Your Node At Boot*  Starting your node automatically each time your computer boots makes it easy for you to contribute to the network.  The easiest way to do this is to start Bitcoin Core daemon when you login to your computer.  Start File Explorer and go to:      C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp  Right-click on the File Explorer window and choose New \u2192 Text file. Name the file `start_bitcoind.bat`. Then right-click on it and choose Open in Notepad (or whatever editor you prefer). Copy and paste the following line into the file.      C:\\Program Files\\Bitcoin\\daemon\\bitcoind  (If you installed Bitcoin Core in a non-default directory, use that directory path instead.)  Save the file. The next time you login to your computer, Bitcoin Core daemon will be automatically started.  {{windows_shutdown_warning}}   {{installFinished}}  ### Windows 8.x  Go to the [Bitcoin Core download page](https://bitcoin.org/en/download) and verify you have made a secure connection to the server.  ![Verify secure connection](/img/full-node/en-secure-connection.png?{{site.time | date: '%s'}})  Click the large blue *Download Bitcoin Core* button to download the Bitcoin Core installer to your desktop.  {{verifyReleaseSignatures}}  After downloading the file to your desktop or your Downloads folder (`C:\\Users\\\\Downloads`), run it by double-clicking its icon. Windows will ask you to confirm that you want to run it. Click Yes and the Bitcoin installer will start.  It's a typical Windows installer, and it will guide you through the decisions you need to make about where to install Bitcoin Core.  ![Windows 7 installer start](/img/full-node/en-win7-installer-start.png?{{site.time | date: '%s'}})   *To continue, choose one of the following options*  1. If you want to use the Bitcoin Core Graphical User Interface (GUI),    proceed to the [Bitcoin Core GUI](#win8-gui) section below.  2. If you want to use the Bitcoin Core daemon (bitcoind), which is    useful for programmers and advanced users, proceed to the [Bitcoin    Core Daemon](#win8-daemon) section below.  3. If you want to use both the GUI and the daemon, read both the [GUI    instructions](#win8-gui) and the [daemon    instructions](#win8-daemon). Note that you can't run both the GUI    and the daemon at the same time using the same configuration    directory.    #### Bitcoin Core GUI {#win8-gui} {:.no_toc}  Press the Windows key (`\u229e Win`) and start typing \"bitcoin\".  When the Bitcoin Core icon appears (as shown below), click on it.  ![Starting Bitcoin Core](/img/full-node/en-win8-start-bitcoin-core.png?{{site.time | date: '%s'}})  You will be prompted to choose a directory to store the Bitcoin block chain and your wallet.  Unless you have a separate partition or drive you want to use, click Ok to use the default.  ![Bitcoin-Qt Welcome](/img/full-node/en-win7-welcome-to-bitcoin-core.png?{{site.time | date: '%s'}})  Your firewall may block Bitcoin Core from making outbound connections. It's safe to allow Bitcoin Core to use all networks. (Note: you will still need to configure inbound connections as described later in the [Network Configuration](#network-configuration) section.)  ![Opening outgoing firewall for Bitcoin Core](/img/full-node/en-win7-bitcoin-core-outgoing-firewall.png?{{site.time | date: '%s'}})  Bitcoin Core GUI will begin to download the block chain.  This step will take at least several days, and it may take much more time on a slow Internet connection or with a slow computer.  During the download, Bitcoin Core will use a significant part of your connection bandwidth.  You can stop Bitcoin Core at any time by closing it; it will resume from the point where it stopped the next time you start it.  ![Bitcoin-Qt Initial Block Download](/img/full-node/en-win7-ibd.png?{{site.time | date: '%s'}})  After download is complete, you may use Bitcoin Core as your wallet or you can just let it run to help support the Bitcoin network.   *Optional: Start Your Node At Login*  Starting your node automatically each time you login to your computer makes it easy for you to contribute to the network. The easiest way to do this is to tell Bitcoin Core GUI to start at login.  While running Bitcoin Core GUI, open the Settings menu and choose Options.  On the Main tab, click *Start Bitcoin on system login*.  Click the Ok button to save the new settings.  ![Choosing to start Bitcoin Core at login](/img/full-node/en-win7-start-on-login.png?{{site.time | date: '%s'}})  The next time you login to your desktop, Bitcoin Core GUI will be automatically started minimized in the task bar.  {{windows_shutdown_warning}}   {{installFinished}}   #### Bitcoin Core Daemon {#win8-daemon} {:.no_toc}  To start Bitcoin Core daemon, first open a command window: press the Windows key (`\u229e Win`) and type \"cmd\".  Choose the option labeled \"Command Prompt\".  ![Running cmd](/img/full-node/en-win8-running-cmd.png?{{site.time | date: '%s'}})  If you installed Bitcoin Core into the default directory, type the following at the command prompt:      C:\\Program Files\\Bitcoin\\daemon\\bitcoind  Bitcoin Core daemon should start. To interact with Bitcoin Core daemon, you will use the command `bitcoin-cli` (Bitcoin command line interface).  If you installed Bitcoin Core into the default location, type the following at the command prompt to see whether it works:      C:\\Program Files\\Bitcoin\\daemon\\bitcoin-cli getblockchaininfo  {{start_up_and_recommended_commands}}  For example, to safely stop your node, run the following command:      C:\\Program Files\\Bitcoin\\daemon\\bitcoin-cli stop  {{complete_list_of_commands_and_ibd}}   *Optional: Start Your Node At Boot*  Starting your node automatically each time your computer boots makes it easy for you to contribute to the network.  The easiest way to do this is to start Bitcoin Core daemon when you login to your computer.  Start File Explorer and go to:      C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp  Right-click on the File Explorer window and choose New \u2192 Text file. Name the file `start_bitcoind.bat`. Then right-click on it and choose Open in Notepad (or whatever editor you prefer). Copy and paste the following line into the file.      C:\\Program Files\\Bitcoin\\daemon\\bitcoind  (If you installed Bitcoin Core in a non-default directory, use that directory path instead.)  Save the file. The next time you login to your computer, Bitcoin Core daemon will be automatically started.  {{windows_shutdown_warning}}   {{installFinished}}  ### Windows 7  Go to the [Bitcoin Core download page](https://bitcoin.org/en/download) and verify you have made a secure connection to the server.  ![Verify secure connection](/img/full-node/en-secure-connection.png?{{site.time | date: '%s'}})  Click the large blue *Download Bitcoin Core* button to download the Bitcoin Core installer to your desktop.  {{verifyReleaseSignatures}}  After downloading the file to your desktop or your Downloads folder (`C:\\Users\\\\Downloads`), run it by double-clicking its icon. Windows will ask you to confirm that you want to run it. Click Yes and the Bitcoin installer will start.  It's a typical Windows installer, and it will guide you through the decisions you need to make about where to install Bitcoin Core.  ![Windows 7 installer start](/img/full-node/en-win7-installer-start.png?{{site.time | date: '%s'}})   *To continue, choose one of the following options*  1. If you want to use the Bitcoin Core Graphical User Interface (GUI),    proceed to the [Bitcoin Core GUI](#win7-gui) section below.  2. If you want to use the Bitcoin Core daemon (bitcoind), which is    useful for programmers and advanced users, proceed to the [Bitcoin    Core Daemon](#win7-daemon) section below.  3. If you want to use both the GUI and the daemon, read both the [GUI    instructions](#win7-gui) and the [daemon    instructions](#win7-daemon). Note that you can't run both the GUI    and the daemon at the same time using the same configuration    directory.    #### Bitcoin Core GUI {#win7-gui} {:.no_toc}  Open the *Start* menu, type `bitcoin` into the search box, and click the *Bitcoin Core* icon.  ![Start Bitcoin Core](/img/full-node/en-win7-start-bitcoin-core.png?{{site.time | date: '%s'}})  You will be prompted to choose a directory to store the Bitcoin block chain and your wallet.  Unless you have a separate partition or drive you want to use, click Ok to use the default.  ![Bitcoin-Qt Welcome](/img/full-node/en-win7-welcome-to-bitcoin-core.png?{{site.time | date: '%s'}})  Your firewall may block Bitcoin Core from making outbound connections. It's safe to allow Bitcoin Core to use all networks. (Note: you will still need to configure inbound connections as described later in the [Network Configuration](#network-configuration) section.)  ![Opening outgoing firewall for Bitcoin Core](/img/full-node/en-win7-bitcoin-core-outgoing-firewall.png?{{site.time | date: '%s'}})  Bitcoin Core GUI will begin to download the block chain.  This step will take at least several days, and it may take much more time on a slow Internet connection or with a slow computer.  During the download, Bitcoin Core will use a significant part of your connection bandwidth.  You can stop Bitcoin Core at any time by closing it; it will resume from the point where it stopped the next time you start it.  ![Bitcoin-Qt Initial Block Download](/img/full-node/en-win7-ibd.png?{{site.time | date: '%s'}})  After download is complete, you may use Bitcoin Core as your wallet or you can just let it run to help support the Bitcoin network.   *Optional: Start Your Node At Login*  Starting your node automatically each time you login to your computer makes it easy for you to contribute to the network. The easiest way to do this is to tell Bitcoin Core GUI to start at login.  While running Bitcoin Core GUI, open the Settings menu and choose Options.  On the Main tab, click *Start Bitcoin on system login*.  Click the Ok button to save the new settings.  ![Choosing to start Bitcoin Core at login](/img/full-node/en-win7-start-on-login.png?{{site.time | date: '%s'}})  The next time you login to your desktop, Bitcoin Core GUI will be automatically started minimized in the task bar. {{windows_shutdown_warning}}    {{installFinished}}  ##### Bitcoin Core Daemon {#win7-daemon} {:.no_toc}  To start Bitcoin Core daemon, first open a command window: press the Windows key (`\u229e Win`) and type \"cmd\". Choose the program named \"cmd.exe\"  ![Running cmd](/img/full-node/en-win7-running-cmd.png?{{site.time | date: '%s'}})  If you installed the Bitcoin Core into the default directory, type the following at the command prompt :      C:\\Program Files\\Bitcoin\\daemon\\bitcoind  Bitcoin Core daemon should start. You can now try using Bitcoin Cli Utility.  To interact with Bitcoin Core daemon, you will use the command `bitcoin-cli` (Bitcoin command line interface). If you installed Bitcoin Core into the default location, type the following at the command prompt to see whether it works:      C:\\Program Files\\Bitcoin\\daemon\\bitcoin-cli getblockchaininfo  {{start_up_and_recommended_commands}}  For example, to safely stop your node, run the following command:      C:\\Program Files\\Bitcoin\\daemon\\bitcoin-cli stop  {{complete_list_of_commands_and_ibd}}   *Optional: Start Your Node At Boot*  Starting your node automatically each time your computer boots makes it easy for you to contribute to the network. The easiest way to do this is to start Bitcoin Core daemon when you login to your computer.  Start File Explorer and go to:      C:\\Users\\Example\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp  You can also access this folder by executing the following command after reaching the `Execute...` prompt :      shell:startup  Right-click on the File Explorer window and choose New \u2192 Text file. Name the file `start_bitcoind.bat`. Then right-click on it and choose Open in Notepad (or whatever editor you prefer). Copy and paste the following line into the file.      C:\\Program Files\\Bitcoin\\daemon\\bitcoind  (If you installed Bitcoin Core in a non-default directory, use that directory path instead.)  Save the file. The next time you login to your computer, Bitcoin Core daemon will be automatically started.  {{windows_shutdown_warning}}   {{installFinished}}    ## Mac OS X Instructions  ### Mac OS X Yosemite 10.10.x+  Go to the [Bitcoin Core download page](https://bitcoin.org/en/download) and verify you have made a secure connection to the server.  ![Verify secure connection](/img/full-node/en-osx-safari-secure-connection.png?{{site.time | date: '%s'}})  Click the large blue *Download Bitcoin Core* button to download the Bitcoin Core installer to your Downloads folder.  {{verifyReleaseSignatures}}  After downloading the file to your Downloads folder (`/Users//Downloads`), run it by double-clicking its icon. OS X will open a Finder window for you to drag *Bitcoin Core* to your Applications folder.  ![Window to install](/img/full-node/en-osx-dmg-open.png?{{site.time | date: '%s'}})  #### Bitcoin Core GUI {#osx-gui} {:.no_toc}  The first time running *Bitcoin Core*, Max OS X will ask you to confirm that you want to run it:  ![Mac OS X File Security Dialog](/img/full-node/en-osx-security.png?{{site.time | date: '%s'}})  You will be prompted to choose a directory to store the Bitcoin block chain and your wallet.  Unless you have a separate partition or drive you want to use, click Ok to use the default.  ![Bitcoin Core Welcome](/img/full-node/en-osx-welcome-to-bitcoin-core.png?{{site.time | date: '%s'}})  Bitcoin Core GUI will begin to download the block chain.  This step will take at least several days, and it may take much more time on a slow Internet connection or with a slow computer.  During the download, Bitcoin Core will use a significant part of your connection bandwidth.  You can stop Bitcoin Core at any time by closing it; it will resume from the point where it stopped the next time you start it.  ![Bitcoin Core Initial Block Download](/img/full-node/en-osx-ibd.png?{{site.time | date: '%s'}})  After download is complete, you may use Bitcoin Core as your wallet or you can just let it run to help support the Bitcoin network.   *Optional: Start Your Node At Login*  Starting your node automatically each time you login to your computer makes it easy for you to contribute to the network. The easiest way to do this is to tell Bitcoin Core GUI to start at login.  While running Bitcoin Core GUI, open the Bitcoin Core menu and choose Preferences.  On the Main tab, click *Start Bitcoin on system login*.  Click the Ok button to save the new settings.  ![Choosing to start Bitcoin Core at login](/img/full-node/en-osx-start-on-login.png?{{site.time | date: '%s'}})  The next time you login to your desktop, Bitcoin Core GUI will be automatically started minimized in the task bar.   {{installFinished}}  #### Bitcoin Core Daemon {#osx-daemon} {:.no_toc}  The Bitcoin Core daemon (bitcoind) is not included in the .dmg file you may have downloaded to install Bitcoin-QT. Bitcoind, along with its support binaries, is instead included in the OS X .tar.gz file listed on the official Bitcoin Core download page. To download this file using Terminal, execute the following command:      curl -O https://bitcoin.org/bin/bitcoin-core-{{site.DOWNLOAD_VERSION}}/bitcoin-{{site.DOWNLOAD_VERSION}}-osx64.tar.gz  {{verifyReleaseSignatures}}  Extract bitcoind and its support binaries from the archive we just downloaded by running this command in Terminal:      tar -zxf bitcoin-{{site.DOWNLOAD_VERSION}}-osx64.tar.gz  Now we'll move the executables into your default path to make running and stopping bitcoind easier. To move the executables, run these commands (note that we have to use `sudo` to perform these commands since we are modifying directories owned by root):      sudo mkdir -p /usr/local/bin     sudo cp bitcoin-{{site.DOWNLOAD_VERSION}}/bin/bitcoin* /usr/local/bin/.  To clean up the directory we've been working in, run:      rm -rf bitcoin-{{site.DOWNLOAD_VERSION}}*  You should now be able to start up your full node by running `bitcoind -daemon` in any Terminal window. If you need to stop bitcoind for any reason, the command is `bitcoin-cli stop`   *Optional: Start Your Node At Login*  Starting your node automatically each time you login to your computer makes it easy for you to contribute to the network. The easiest way to do this is to tell Bitcoin Core Daemon to start at login. In OS X, the way to start background programs at login is using a Launch Agent. Here is how to install a Launch Agent for Bitcoin Core daemon on your machine:      mkdir ~/Library/LaunchAgents     curl https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/init/org.bitcoin.bitcoind.plist &gt; ~/Library/LaunchAgents/org.bitcoin.bitcoind.plist  The next time you login to your desktop, Bitcoin Core daemon will be automatically started.   {{installFinished}}    ## Upgrading Bitcoin Core  If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).  The blockchain and wallet files in the data directory are compatible between versions so there is no requirement to make any changes to the data directory when upgrading. Occasionally the format of those files changes, but the new Bitcoin Core version will include code that automatically upgrades the files to the new format so no manual intervention is required.  Sometimes upgrade of the blockchain data files from very old versions to the new versions is not supported. In those cases it may be necessary to redownload the blockchain. Check the release notes of the new version if you are planning to upgrade from a very old version.  Sometimes downgrade is not possible because of changes to the data files. Again, check the release notes for the new version if you are planning to downgrade.    ## Network Configuration  If you want to support the Bitcoin network, you must allow inbound connections.  When Bitcoin Core starts, it establishes 10 outbound connections to other full nodes so it can download the latest blocks and transactions. If you just want to use your full node as a wallet, you don't need more than these 10 connections---but if you want to support lightweight clients and other full nodes on the network, you must allow inbound connections.  Servers connected directly to the Internet usually don't require any special configuration.  You can use the testing instructions below to confirm your server-based node accepts inbound connections.  Home connections are usually filtered by a router or modem. Bitcoin Core will request your router automatically configure itself to allow inbound connections to Bitcoin's port, port 8333. Unfortunately many routers don't allow automatic configuration, so you must manually configure your router. You may also need to configure your firewall to allow inbound connections to port 8333. Please see the following subsections for details.  ### Testing Connections  The BitNodes project provides an online tool to let you test whether your node accepts inbound connections. Before using BitNodes, you must first ensure that your node is fully synced with the block chain. Once you've done so, start Bitcoin Core (either the GUI or the daemon), wait 10 minutes, and then [visit the Bitnodes page](https://bitnodes.io/#join-the-network). The tool will attempt to guess your IP address---if the address is wrong (or blank), you will need to enter your address manually.  ![Bitnodes Tool](/img/full-node/en-bitnodes-tool.png?{{site.time | date: '%s'}})  After you press Check Node, the tool will inform you whether your port is open (green box) or not open (red box). If you get the green box, you don't need to do anything---you accept inbound connections.  If you get the red box, please read the [enabling connections](#enabling-connections) subsection.   For confirmation that you accept inbound connections, you can use Bitcoin Core. Bitcoin Core can't tell you directly whether you allow inbound connections, but it can tell you whether or not you currently have any inbound connections. If your node has been online for at least 30 minutes, it should normally have inbound connections. If want to check your peer info using Bitcoin Core, choose the appropriate instructions below:  * [Peer info in Bitcoin Core GUI](#gui-peer-info)  * [Peer info in Bitcoin Core daemon](#daemon-peer-info)  #### GUI Peer Info  In the bottom right corner of the Bitcoin Core GUI are several icons. If you hover over the signal strength icon, it will tell you how many connections you have. The icon won't turn green until you have more than 10 active connections, which only happens if inbound connections are allowed.  ![Active connections](/img/full-node/en-active-connections.png?{{site.time | date: '%s'}})  For confirmation, you can go to the Help menu, choose Debug Window, and open the Information tab. In the Network section, it will tell you exactly how many inbound connections you have. If the number is greater than zero, then inbound connections are allowed.  ![Debug window with inbound connections](/img/full-node/en-debug-inbound-connections.png?{{site.time | date: '%s'}})  If you don't have inbound connections, please read the instructions for [enabling inbound connections.](#enabling-connections)  #### Daemon Peer Info  The [`getconnectioncount`](https://developer.bitcoin.org/reference/rpc/getconnectioncount.html) command will tell you how many connections you have. If you have more than 10 connections, inbound connections are allowed. For example:  <pre>$ bitcoin-cli getconnectioncount\n52</pre>  For confirmation, you can use the [`getpeerinfo`](https://developer.bitcoin.org/reference/rpc/getpeerinfo.html) command to get information about all of your peers.  Each peer's details will include an `inbound` field set to true if the connection is inbound.  If you have any inbound connections, then inbound connections are allowed.  If you don't have inbound connections, please read instructions for [enabling inbound connections.](#enabling-connections)  ### Enabling Connections  If Bitcoin Core can't automatically configure your router to open port 8333, you will need to manually configure your router.  We've tried to make the following instructions generic enough to cover most router models; if you need specific help with your router, please ask for help on a tech support site such as [SuperUser](http://superuser.com/).  Enabling inbound connections requires two steps, plus an extra third step for firewall users:  1. Giving your computer a static (unchanging) internal IP address by    configuring the Dynamic Host Configuration Protocol (DHCP) on your    router.  2. Forwarding inbound connections from the Internet through your    router to your computer where Bitcoin Core can process them.  3. Configuring your firewall to allow inbound connections. This step    mainly applies to Windows users, as Mac OS X and most Linuxes do not    enable a firewall by default.  #### Configuring DHCP  In order for your router to direct incoming port 8333 connections to your computer, it needs to know your computer's internal IP address. However, routers usually give computers dynamic IP addresses that change frequently, so we need to ensure your router always gives your computer the same internal IP address.  Start by logging into your router's administration interface.  Most routers can be configured using one of the following URLs, so keep clicking links until you find one that works.  If none work, consult your router's manual.  *  (some Linksys/Cisco models) *  (some D-Link/Netgear models) *  (some Belkin/SMC models) *  (some US Robotics models) *  (some Apple models)  Upon connecting, you will probably be prompted for a username and password.  If you configured a password, enter it now.  If not, the [Router Passwords site](http://www.routerpasswords.com/) provides a database of known default username and password pairs.  After logging in, you want to search your router's menus for options related to DHCP, the Dynamic Host Configuration Protocol.  These options may also be called Address Reservation.  For example, the router page shown below calls the option we need \"DHCP Reservation\":  ![DHCP reservation button](/img/full-node/en-dhcp-reservation.png?{{site.time | date: '%s'}})  In the reservation configuration, some routers will display a list of computers and devices currently connected to your network, and then let you select a device to make its current IP address permanent:  ![Easy DHCP reservation](/img/full-node/en-easy-dhcp-reservation.png?{{site.time | date: '%s'}})  If that's the case, find the computer running Bitcoin Core in the list, select it, and add it to the list of reserved addresses. Make a note of its current IP address---we'll use the address in the next section.  Other routers require a more manual configuration. For these routers, you will need to look up the fixed address (MAC address) for your computer's network card and add it to the list. This operation differs by operating system:  * **Windows 7 &amp; 8:** Press Win-R (Windows key plus the R key) to open   the Run dialog. Type `cmd` to open the console. Type `ipconfig /all` and   find the result that best matches your connection---usually a wireless   connection. Look for a line that starts with \"Physical Address\" and   contains a value like this:          Physical Address. . . . . . . . . : 01-23-45-67-89-AB      Replace all the dashes with colons, so the address looks like this:     01:23:45:67:89:AB.  Use that address in the instructions below.  * **Linux:** open a terminal and type `ifconfig`. Find the result that   best matches your connection---a result starting with `wlan` indicates   a wireless connection. Find the field that starts with `HWaddr` and copy   the immediately following field that looks like 01:23:45:67:89:ab. Use   that value in the instructions below.  * **Mac OS X:** open a terminal and type `ifconfig`. Find the result   that best matches your connection---a result starting with `en1`   usually indicates a wireless connection. Find the field that starts   with `ether:` and copy the immediately following field that looks like   01:23:45:67:89:ab. Use that value in the instructions below.  Once you have the MAC address, you can fill it into your router's manual DHCP assignment table, as illustrated below. Also choose an IP address and make a note of it for the instructions in the next subsection. After entering this information, click the Add or Save button.  ![Manual DHCP reservation](/img/full-node/en-manual-dhcp-reservation.png?{{site.time | date: '%s'}})  Then reboot your computer to ensure it gets assigned the address you selected and proceed to the Port Forwarding instructions below.  #### Port Forwarding  For this step, you need to know the local IP address of the computer running Bitcoin Core. You should have this information from configuring the DHCP assignment table in the subsection above.  Login to your router using the same steps described near the top of the [DHCP subsection](#configuring-dhcp).  Look for an option called Port Forwarding, Port Assignment, or anything with \"Port\" in its name.  On some routers, this option is buried in an Applications &amp; Gaming menu.  The port forwarding settings should allow you to map an external port on your router to the \"internal port\" of a device on your network as shown in the screenshot below.  ![Port forwarding](/img/full-node/en-port-forwarding.png?{{site.time | date: '%s'}})  Both the external port and the internal port should be 8333 for Bitcoin. (You may also want to map port 18333 for Bitcoin's testnet, although this guide does not cover using testnet.)  Make sure the IP address you enter is the same one you configured in the previous subsection.  After filling in the details for the mapping, save the entry. You should not need to restart anything. Start Bitcoin Core (if you haven't already) and follow the [Testing Connections](#testing-connections) instructions to test your connection.  If you still can't connect and you use a firewall, you probably need to change your firewall settings. See the Firewall section below.  If something else went wrong, it's probably a problem with your router configuration. Re-read the instructions above to see if you missed anything, search the web for help with \"port forwarding\", and ask for help on sites like [SuperUser](http://superuser.com).  We can't provide direct support, but if you see a way to improve these instructions, please [open an issue.](https://github.com/bitcoin-dot-org/bitcoin.org/issues/new)  #### Firewall Configuration  Firewalls block inbound connections.  To use Bitcoin, you need to configure your computer's firewall to allow connections to port 8333. This is usually as easy as starting your firewall configuration software and defining a new rule to allow inbound connections to port 8333.  For additional information for Windows, see the links below:  * [Instructions for Windows Firewall](https://learn.microsoft.com/en-us/windows/security/threat-protection/windows-firewall/create-an-inbound-port-rule) * [Instructions for Norton Firewall](http://community.norton.com/en/forums/firewall-blocking-program-how-open-ports) * [Instructions for Mcafee Personal Firewall](http://service.mcafee.com/FAQDocument.aspx?id=TS100887)  Mac OS X comes with its firewall disabled by default, but if you have enabled it, see the section Allowing Specific Applications from the [official Apple guide.](http://support.apple.com/en-us/HT201642)  Ubuntu also comes with its firewall disabled by default, but if you have enabled it, see the [Ubuntu wiki page](https://help.ubuntu.com/community/Gufw) for information about adding port forwarding rules.  Once you have allowed inbound connections to port 8333, start Bitcoin Core (if you haven't already) and follow the [Testing Connections](#testing-connections) instructions to test your connection.  If something else went wrong re-read the DHCP, port forwarding, and firewall instructions above to see if you missed anything, search the web for help with \"port forwarding\" and \"opening firewall ports\", and ask for help on sites like [SuperUser](http://superuser.com).  We can't provide direct support, but if you see a way to improve these instructions, please [open an issue.](https://github.com/bitcoin-dot-org/bitcoin.org/issues/new)    ## Configuration Tuning  This section contains advice about how to change your Bitcoin Core configuration to adapt it to your needs.  There are two ways to change your configuration.  The first is to start Bitcoin Core with the options you want.  For example, if you want to limit it to using one CPU core for signature verification, you can start Bitcoin Core like this:  {% highlight bash %} ### Bitcoin Core daemon bitcoind -par=1 -daemon  ### Bitcoin Core GUI bitcoin-qt -par=1 {% endhighlight %}  Once you've decided you like an option, you can add it to the Bitcoin Core configuration file.  You can find that file in the following directories:  - Windows: %APPDATA%\\Bitcoin\\  - OSX: $HOME/Library/Application Support/Bitcoin/  - Linux: $HOME/.bitcoin/  To add an option to the configuration file, just remove its leading dash.  You may also need to remove any quotation marks you used in your shell. For example, the `-par` option seen above would look like this in the configuration file:  {% highlight text %} par=1 {% endhighlight %}  A user-friendly configuration file generator is [available here.](https://jlopp.github.io/bitcoin-core-config-generator/) If you have any questions about configuring Bitcoin Core, please stop by one of our [forums](/en/bitcoin-core/help#forums) or [live chatrooms](/en/bitcoin-core/help#live).  ### Reduce Storage  It is possible to configure your node to run in pruned mode in order to reduce storage requirements. This can reduce the disk usage from over {{site.text.bitcoin_datadir_gb}}GB to around {{site.text.bitcoin_datadir_gb_pruned}}GB.  Running a node in pruned mode is incompatible with `-txindex` and `-rescan`. It also disables the RPC `importwallet`. Two RPCs that are available and potentially helpful, however, are `importprunedfunds` and `removeprunedfunds`.  To enable block pruning set `prune=N` on the command line or in `bitcoin.conf`, where `N` is the number of MiB to allot for raw block and undo data.  A value of `0` disables pruning. The minimal value above `0` is `550`. Your wallet is as secure with high values as it is with low ones. Higher values merely ensure that your node will not shut down upon blockchain reorganizations of more than 2 days - which are unlikely to happen in practice. In future releases, a higher value may also help the network as a whole because stored blocks could be served to other nodes.  ### Reduce Traffic  Some node operators need to deal with bandwidth caps imposed by their ISPs.  By default, Bitcoin Core allows up to 125 connections to different peers, 10 of which are outbound. You can therefore have at most 115 inbound connections.  The default settings can result in relatively significant traffic consumption.  Ways to reduce traffic:  #### Maximum Upload Targets  {% highlight text %} -maxuploadtarget= {% endhighlight %}  A major component of the traffic is caused by serving historic blocks to other nodes during the initial blocks download phase (syncing up a new node). This option can be specified in MiB per day and is turned off by default. This is *not* a hard limit; only a threshold to minimize the outbound traffic. When the limit is about to be reached, the uploaded data is cut by no longer serving historic blocks (blocks older than one week). Keep in mind that new nodes require other nodes that are willing to serve historic blocks. **The recommended minimum is 144 blocks per day (max. 144MiB per day)**  #### Disable listening  {% highlight text %} -listen=0 {% endhighlight %}  Disabling listening will result in fewer nodes connected (remember the maximum of 10 outbound peers). Fewer nodes will result in less traffic usage as you are relaying blocks and transactions to fewer nodes.  #### Reduce maximum connections  {% highlight text %} -maxconnections= {% endhighlight %}  Reducing the maximum connected nodes to a minimum could be desirable if traffic limits are tiny. Keep in mind that Bitcoin's trustless model works best if you are connected to a handful of nodes.  #### Blocks-only mode  {% highlight text %} -blocksonly {% endhighlight %}  {% comment %}update-if-segwit: change max bandwidth amounts{% endcomment %}  Causes your node to stop requesting and relaying transactions unless they are part of a block and also disables listening as described above.  This reduces your node's bandwidth to the absolute minimum necessary to stay synchronized with the network, about 150 megabytes incoming data per day and about 1 megabyte of outgoing data per day, but it does mean that your node won't see incoming transactions until they've received at least one confirmation.  You will still be able to send transactions from the built-in wallet or from peers you've whitelisted using the `-whitelist` parameter."},{"location":"desktop/","title":"Desktop wallet","text":"<p>You can get latest desktop wallet from here or build it on your own using code from master branch. Chavinci QT wallet runs on all operating systems: Linux, Mac OS and Windows.</p> <p>First thing you will see after opening wallet is splash screen:</p> <p></p> <p>During first run wallet must synchronize Chavinci blockchain, it may take 5-10 minutes:</p> <p></p> <p>Once synchronization is done, you will be presented with overview screen where your Chavinci, tokens and history will be displayed:</p> <p></p> <p>You can send your Chavinci coins via send screen:</p> <p></p> <p>New address can be created at receive screen:</p> <p></p> <p>At transactions screen you can check your history of transfers:</p> <p></p> <p>Tokens can be transfered at token transfer screen:</p> <p></p>"},{"location":"getting-started/","title":"Getting started","text":"<p>Material for MkDocs is a powerful documentation framework on top of MkDocs, a static site generator for project documentation.[^1] If you're familiar with Python, you can install Material for MkDocs with <code>pip</code>, the Python package manager. If not, we recommend using <code>docker</code>.</p> <p>[^1]:     In 2016, Material for MkDocs started out as a simple theme for MkDocs, but     over the course of several years, it's now much more than that \u2013 with the     many built-in plugins, settings, and countless customization abilities,     Material for MkDocs is now one of the simplest and most powerful frameworks     for creating documentation for your project.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#with-pip-recommended-with-pip-data-toc-labelwith-pip","title":"with pip recommended { #with-pip data-toc-label=\"with pip\" }","text":"<p>Material for MkDocs is published as a Python package and can be installed with <code>pip</code>, ideally by using a virtual environment. Open up a terminal and install Material for MkDocs with:</p> <p>=== \"Latest\"</p> <pre><code>``` sh\npip install mkdocs-material\n```\n</code></pre> <p>=== \"9.x\"</p> <pre><code>``` sh\npip install mkdocs-material==\"9.*\" # (1)!\n```\n\n1.  Material for MkDocs uses [semantic versioning][^2], which is why it's a\n    good idea to limit upgrades to the current major version.\n\n    This will make sure that you don't accidentally [upgrade to the next\n    major version], which may include breaking changes that silently corrupt\n    your site. Additionally, you can use `pip freeze` to create a lockfile,\n    so builds are reproducible at all times:\n\n    ```\n    pip freeze &gt; requirements.txt\n    ```\n\n    Now, the lockfile can be used for installation:\n\n    ```\n    pip install -r requirements.txt\n    ```\n</code></pre> <p>[^2]:     Note that improvements of existing features are sometimes released as     patch releases, like for example improved rendering of content tabs, as     they're not considered to be new features.</p> <p>This will automatically install compatible versions of all dependencies: MkDocs, Markdown, Pygments and Python Markdown Extensions. Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.</p> <p>:fontawesome-brands-youtube:{ style=\"color: #EE0F0F\" } How to set up Material for MkDocs by @james-willett \u2013 :octicons-clock-24: 15m \u2013 Learn how to create and host a documentation site using Material for MkDocs on GitHub Pages in a step-by-step guide.</p> <p>Tip: If you don't have prior experience with Python, we recommend reading Using Python's pip to Manage Your Projects' Dependencies, which is a really good introduction on the mechanics of Python package management and helps you troubleshoot if you run into errors.</p>"},{"location":"getting-started/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Open up a terminal and pull the image with:</p> <p>=== \"Latest\"</p> <pre><code>```\ndocker pull squidfunk/mkdocs-material\n```\n</code></pre> <p>=== \"9.x\"</p> <pre><code>```\ndocker pull squidfunk/mkdocs-material:9\n```\n</code></pre> <p>The <code>mkdocs</code> executable is provided as an entry point and <code>serve</code> is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections.</p> <p>The following plugins are bundled with the Docker image:</p> <ul> <li>mkdocs-minify-plugin</li> <li>mkdocs-redirects</li> </ul> <p>??? question \"How to add plugins to the Docker image?\"</p> <pre><code>Material for MkDocs only bundles selected plugins in order to keep the size\nof the official image small. If the plugin you want to use is not included,\nyou can add them easily:\n\n=== \"Material for MkDocs\"\n\n    Create a `Dockerfile` and extend the official image:\n\n    ``` Dockerfile title=\"Dockerfile\"\n    FROM squidfunk/mkdocs-material\n    RUN pip install mkdocs-macros-plugin\n    RUN pip install mkdocs-glightbox\n    ```\n\n=== \"Insiders\"\n\n    Clone or fork the Insiders repository, and create a file called\n    `user-requirements.txt` in the root of the repository. Then, add the\n    plugins that should be installed to the file, e.g.:\n\n    ``` txt title=\"user-requirements.txt\"\n    mkdocs-macros-plugin\n    mkdocs-glightbox\n    ```\n\nNext, build the image with the following command:\n\n```\ndocker build -t squidfunk/mkdocs-material .\n```\n\nThe new image will have additional packages installed and can be used\nexactly like the official image.\n</code></pre>"},{"location":"getting-started/#with-git","title":"with git","text":"<p>Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git\n</code></pre> <p>Next, install the theme and its dependencies with:</p> <pre><code>pip install -e mkdocs-material\n</code></pre>"},{"location":"metadata/","title":"Token metadata","text":"<p>This document contains JSON schema specification for Chavinci token metadata which can be stored inside IPFS. It's and loosely based on \"ERC-1155 Metadata URI JSON Schema\".</p> <p>Schema:</p> <pre><code>{\n    \"title\": \"Token Metadata\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Identifies the name of given token.\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Describes the token and its purpose.\"\n        },\n        \"image\": {\n            \"type\": \"string\",\n            \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\n        },\n        \"properties\": {\n            \"type\": \"object\",\n            \"description\": \"Arbitrary properties. Values may be strings, numbers, object or arrays.\"\n        }\n    }\n}\n</code></pre> <p>Example data:</p> <pre><code>{\n    \"name\": \"Mj\u00f6lnir\",\n    \"description\": \"Mj\u00f6lnir is the hammer of the thunder god Thor in Norse mythology, used both as a devastating weapon and as a divine instrument to provide blessings.\",\n    \"image\": \"ipfs://QmeJPx9UpmyZ4536oSp4cNb9C1aSX4PzT8n9mrYppQ2KrN\",\n    \"properties\": {\n        \"simple_property\": \"example value\",\n        \"rich_property\": {\n            \"name\": \"Name\",\n            \"value\": \"123\",\n            \"display_value\": \"123 Example Value\",\n            \"class\": \"emphasis\",\n            \"css\": {\n                \"color\": \"#ffffff\",\n                \"font-weight\": \"bold\",\n                \"text-decoration\": \"underline\"\n            }\n        },\n        \"array_property\": {\n            \"name\": \"Name\",\n            \"value\": [1,2,3,4],\n            \"class\": \"emphasis\"\n        }\n    }\n}\n</code></pre>"},{"location":"mobile/","title":"Mobile wallet","text":"<p>You can get latest mobile wallet from here. Chavinci mobile wallet is listed in  Play Market and App Store.</p> <p>During first run of mobile wallet, you'll need to create or import a wallet using seed phrase:</p> <p></p> <p>Once it's done, you will see password screen, select your password carefully:</p> <p></p> <p>You can send your Chavinci coins via send screen:</p> <p></p> <p>New address can be created at receive screen:</p> <p></p> <p>At transactions screen you can check your history of transfers:</p> <p></p> <p>In the end, do not forget, to use our address list feature, add important address into that list, and you'll have the option to send fund to them instantly:</p> <p></p>"},{"location":"node/","title":"Full node","text":"<p>In order to sync Chavinci blockchain you must setup full node. This guide describes setup process and some concepts like intraction with your node via command line interface.</p>"},{"location":"node/#what-is-a-full-node","title":"What Is A Full Node?","text":"<p>A full node is a program that fully validates transactions and blocks. Almost all full nodes also help the network by accepting transactions and blocks from other full nodes, validating those transactions and blocks, and then relaying them to further full nodes.</p> <p>Most full nodes also serve lightweight clients by allowing them to transmit their transactions to the network and by notifying them when a transaction affects their wallet. If not enough nodes perform this function, clients won't be able to connect through the peer-to-peer network---they'll have to use centralized services instead.</p> <p>Many people and organizations volunteer to run full nodes using spare computing and bandwidth resources---but more volunteers are needed to allow Bitcoin to continue to grow.  This document describes how you can help and what helping will cost you.</p>"},{"location":"node/#getting-started","title":"Getting started","text":"<p>Chavinci software runs on all operating systems: Linux, macOS and Windows. You can get latest binaries from GitHub or build it on your own using code from master branch.</p> <p>Once you downloaded (or compiled) binaries at your machine, you will have this two binaries:</p> <ul> <li><code>Chavincichaind</code> - headless Chavinci daemon responsible for syncing blockchain and providing wallet service</li> <li><code>Chavincichain-cli</code> - command line client which allows interact with Chavinci node and wallet</li> </ul>"},{"location":"node/#configuration","title":"Configuration","text":"<p>You can specify node params in <code>Chavincichain.conf</code> file at <code>.Chavincichain</code> folder (or <code>C:\\Users\\Username\\AppData\\Roaming\\ChavinciChain</code> on Windows).</p> <p>Example config file looks like this:</p> <pre><code>rpcuser=nodeuser\nrpcpassword=supersecurepassword\ndaemon=1\n</code></pre>"},{"location":"node/#running-node","title":"Running node","text":"<p>Running Chavinci node pretty straightforward, you can use <code>-printtoconsole</code> flag to see the output or use <code>-daemon</code> to run it in headless daemon mode. This flags can also be specified in config file instead.</p> <pre><code>./Chavincichaind -daemon\n</code></pre>"},{"location":"node/#stopping-node","title":"Stopping node","text":"<p>If you launched Chavinci node in daemon mode, it can be stopped using cli utility like this:</p> <pre><code>Chavincichain-cli stop\n</code></pre>"},{"location":"rpc/","title":"RPC","text":"<p>You can interact with Chavinci node using remote procedure call (RPC). Node will reply with data in JSON format.</p>"},{"location":"rpc/#making-request","title":"Making request","text":"<p>You can make request to your node via <code>Chavincichain-cli</code> or by sending POST request with payload to port <code>33440</code>.</p> <p>Example <code>Chavincichain-cli</code> request:</p> <pre><code>./Chavincichain-cli getblock 37eb3f4b73df32d22c4a1c58e91f6e7f0bf58e34e448a8e59d6b2576eeb9c238\n</code></pre> <p>Example POST request:</p> <pre><code>curl --data-binary '{\"jsonrpc\":\"1.0\",\"id\":\"curltext\",\"method\":\"getblock\",\"params\":[\"37eb3f4b73df32d22c4a1c58e91f6e7f0bf58e34e448a8e59d6b2576eeb9c238\"]}' -H 'content-type:text/plain;' http://nodeuser:supersecurepassword@127.0.0.1:33440\n</code></pre> <p>Hint</p> <p>In order to make RPC request via POST request you must configure <code>rpcuser</code> and <code>rpcpassword</code> for your node.</p>"},{"location":"rpc/#network","title":"Network","text":"<p>This methods can be used to get general information about the network.</p> <p><code>getblockchaininfo</code> - returns info about blockchain</p> <pre><code>{\n    \"chain\": \"main\",\n    \"blocks\": 271823,\n    \"headers\": 271823,\n    \"bestblockhash\": \"e4bc6d4b818792a1fb2c57c08454099c4ebf1fcd2f23490573e0260918193b89\",\n    \"difficulty\": 0.002555948098984594,\n    \"mediantime\": 1608143056,\n    \"verificationprogress\": 1,\n    \"chainwork\": \"0000000000000000000000000000000000000000000001f22354cf302a1790ec\",\n    \"size_on_disk\": 417448998,\n    \"pruned\": 0,\n    \"softforks\": [\n    ],\n    \"bip9_softforks\": {\n    },\n    \"warnings\": \"\"\n}\n</code></pre> <p><code>getblockhash &lt;height&gt;</code> - returns block hash</p> <p><code>0012eb05991b2ee8d074fde6c03089d2517937e28adc4219f0a4742b7805be96</code></p> <p><code>getblock &lt;hash&gt;</code> - returns block information</p> <pre><code>{\n    \"hash\": \"0012eb05991b2ee8d074fde6c03089d2517937e28adc4219f0a4742b7805be96\",\n    \"confirmations\": 271835,\n    \"strippedsize\": 231,\n    \"size\": 231,\n    \"weight\": 924,\n    \"height\": 1,\n    \"version\": 536870912,\n    \"versionHex\": \"20000000\",\n    \"merkleroot\": \"49f3bbf10c853367aa597d96a0307e8cb7e0e3ddc6e3e668c141143056a48133\",\n    \"tx\": [\n        \"49f3bbf10c853367aa597d96a0307e8cb7e0e3ddc6e3e668c141143056a48133\"\n    ],\n    \"time\": 1589880735,\n    \"mediantime\": 1589880735,\n    \"nonce\": 284,\n    \"bits\": \"1f3fffff\",\n    \"difficulty\": 2.384149979653205e-07,\n    \"chainwork\": \"0000000000000000000000000000000000000000000000000000000000000800\",\n    \"previousblockhash\": \"000c513d39b0e3657b7b0ca79b2d4b9b18c1f03dacb394acf0e71f49064b3306\",\n    \"nextblockhash\": \"003c074613108695565ea4e76957a346038ff7aa12ab951af3508398bb9b23fd\",\n    \"flags\": \"proof-of-work\",\n    \"modifier\": \"d2ec909dc48208a3a4d92162c14d116b48e27c7cb579f1c3cb4573e1b5c2d4ac\"\n}\n</code></pre>"},{"location":"rpc/#transactions","title":"Transactions","text":"<p>This methods can be used to get information about transactions.</p> <p><code>getrawtransaction &lt;hash&gt; &lt;verbose&gt;</code> - returns information about transaction (set <code>verbose</code> to <code>true</code> for json output)</p> <pre><code>{\n    \"txid\": \"49f3bbf10c853367aa597d96a0307e8cb7e0e3ddc6e3e668c141143056a48133\",\n    \"hash\": \"49f3bbf10c853367aa597d96a0307e8cb7e0e3ddc6e3e668c141143056a48133\",\n    \"version\": 1,\n    \"timestamp\": 1589880735,\n    \"size\": 149,\n    \"vsize\": 149,\n    \"locktime\": 0,\n    \"vin\": [\n        {\n            \"coinbase\": \"510101\",\n            \"sequence\": 4294967295\n        }\n    ],\n    \"vout\": [\n        {\n            \"value\": 2100000000,\n            \"n\": 0,\n            \"scriptPubKey\": {\n                \"asm\": \"03131079e6248a288fcf9daf9828f09544e3f853e870afc651efdb0ca9298059ab OP_CHECKSIG\",\n                \"hex\": \"2103131079e6248a288fcf9daf9828f09544e3f853e870afc651efdb0ca9298059abac\",\n                \"reqSigs\": 1,\n                \"type\": \"pubkey\",\n                \"addresses\": [\n                    \"KrbwDveomVrY4fNH5GrHU52A2HqpzgmCkG\"\n                ]\n            },\n            \"spentTxId\": \"df766dc83db4a93857cb3076bd043ea06138526e282744ad63a478eaa6bb0662\",\n            \"spentIndex\": 0,\n            \"spentHeight\": 12,\n            \"valueSat\": 210000000000000000\n        },\n        {\n            \"value\": 0,\n            \"n\": 1,\n            \"scriptPubKey\": {\n                \"asm\": \"OP_RETURN aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9\",\n                \"hex\": \"6a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9\",\n                \"type\": \"nulldata\"\n            },\n            \"valueSat\": 0\n        }\n    ],\n    \"hex\": \"010000009fa7c35e010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff020000d52ae311ea02232103131079e6248a288fcf9daf9828f09544e3f853e870afc651efdb0ca9298059abac0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf900000000\",\n    \"blockhash\": \"0012eb05991b2ee8d074fde6c03089d2517937e28adc4219f0a4742b7805be96\",\n    \"height\": 1,\n    \"confirmations\": 271841,\n    \"time\": 1589880735,\n    \"blocktime\": 1589880735\n}\n</code></pre> <p><code>getchaintxstats</code> - returns statistics about the total number and rate of transactions in the chain</p> <pre><code>{\n    \"time\": 1608144544,\n    \"txcount\": 1271608,\n    \"window_block_count\": 40500,\n    \"window_tx_count\": 246854,\n    \"window_interval\": 2724352,\n    \"txrate\": 0.09061017078556663\n}\n</code></pre>"},{"location":"rpc/#wallet","title":"Wallet","text":"<p>This methods can be used to get information about wallet.</p> <p><code>getbalance</code> - returns entite Chavinci balance of your wallet</p> <p><code>0.00000000</code></p> <p><code>listmytokens</code> - returns list of all tokens your wallet is holding</p> <pre><code>{\n  \"CHA\": 984.00000000\n}\n</code></pre> <p><code>getnewaddress &lt;label&gt;</code> - returns new address and assign label if it was set</p> <p><code>KpmtABZnYx2qxJwu4wSmRSsEuJ6NwJFd5S</code></p> <p><code>listtransactions &lt;label&gt; &lt;count&gt; &lt;skip&gt;</code> - returns list of last transactions for given label (use <code>*</code> to get list of all incoming transactions)</p> <pre><code>[\n    {\n        \"account\": \"testlabel\",\n        \"token_type\": \"transfer_token\",\n        \"token_name\": \"CHA\",\n        \"amount\": 45.48900000,\n        \"address\": \"KqFZpfbZ6kFFWqg22jv3cBES8o4cCERmW\",\n        \"vout\": 0,\n        \"category\": \"receive\",\n        \"blockhash\": \"3b816b7cb73c98ad22e4673f900eb2f6a9a0a15692227769ab3dc95d301f8ec4\",\n        \"blockindex\": 2,\n        \"blocktime\": 1607785696,\n        \"txid\": \"cacf4bf3dcc43fbe6a76ff7d9f6b4625cda409538928cc9c89881305db95e5d5\",\n        \"confirmations\": 5510,\n        \"walletconflicts\": [\n        ],\n        \"time\": 1607785660,\n        \"timereceived\": 1607785660\n    },\n    {\n        \"account\": \"testlabel\",\n        \"token_type\": \"transfer_token\",\n        \"token_name\": \"CHA\",\n        \"amount\": 45.51290000,\n        \"address\": \"KqFZpfbZ6kFFWqg22jv3cBES8o4cCERmW\",\n        \"vout\": 0,\n        \"category\": \"receive\",\n        \"blockhash\": \"22b5cebcae8a6c3fa3ccf4acd67293ae42b2273e606e97dd9d4be751afa9df9c\",\n        \"blockindex\": 2,\n        \"blocktime\": 1607879552,\n        \"txid\": \"61f7fcea979aec1a9b8812f36e75589ea2b9d4f3ad168b4e1d2e9a00d6206796\",\n        \"confirmations\": 4115,\n        \"walletconflicts\": [\n        ],\n        \"time\": 1607879552,\n        \"timereceived\": 1607879552\n    },\n    {\n        \"account\": \"testlabel\",\n        \"token_type\": \"transfer_token\",\n        \"token_name\": \"CHA\",\n        \"amount\": 45.53510000,\n        \"address\": \"KqFZpfbZ6kFFWqg22jv3cBES8o4cCERmW\",\n        \"vout\": 0,\n        \"category\": \"receive\",\n        \"blockhash\": \"e9f844b193a3e75eb60c95b5ab2db7eb51368307c6fa55cf859bd9a860c0505a\",\n        \"blockindex\": 2,\n        \"blocktime\": 1607964192,\n        \"txid\": \"d16972d5f1b578e143e9cc93f33cefec8eb52926b588d14e425ba9dceef434a4\",\n        \"confirmations\": 2854,\n        \"walletconflicts\": [\n        ],\n        \"time\": 1607964141,\n        \"timereceived\": 1607964141\n    }\n]\n</code></pre> <p><code>sendtoaddress &lt;address&gt; &lt;amount&gt; &lt;locktime&gt;</code> - sends specified amount of Chavinci to address with locktime (if it was set)</p> <p><code>d16972d5f1b578e143e9cc93f33cefec8eb52926b588d14e425ba9dceef434a4</code></p> <p><code>sendmany \"*\" &lt;recepients&gt;</code> - sends Chavinci to multiple recipients (second argument must be set to <code>*</code>). Recepients is regular JSON object with address as a key and amount as value: <code>{\"cud4EpNGfSqecAdB3FH6x6wvNfVEL2iMn\": 10}</code></p> <pre><code>[\n    \"cacf4bf3dcc43fbe6a76ff7d9f6b4625cda409538928cc9c89881305db95e5d5\"\n]\n</code></pre> <p><code>transfer &lt;token&gt; &lt;amount&gt; &lt;address&gt; &lt;locktime&gt;</code> - sends specified amount of token to address with locktime (if it was set)</p> <pre><code>[\n    \"7c9f23b4e8c4df8fa044e19cdadfb1be8cf9a1e38687b4e877978a9747f13780\"\n]\n</code></pre> <p><code>transfermany &lt;token&gt; &lt;recepients&gt;</code> - sends token to multiple recipients (second argument must be set to <code>*</code>). Recepients is regular JSON object with address as a key and amount as value: <code>{\"cud4EpNGfSqecAdB3FH6x6wvNfVEL2iMn\": 10}</code> </p> <pre><code>[\n    \"61f7fcea979aec1a9b8812f36e75589ea2b9d4f3ad168b4e1d2e9a00d6206796\"\n]\n</code></pre>"},{"location":"rpc/#tokens","title":"Tokens","text":"<p>This methods can be used to create/update tokens and get related token information.</p> <p><code>issue &lt;name&gt; &lt;amount&gt; &lt;address&gt; &lt;change_address&gt; &lt;units&gt; &lt;reissuable&gt;</code> - issue token to address (if specified)</p> <pre><code>[\n    \"94cac36a44021ee3e8cdf7365b34212e588679b927858453a714d4fa97df033a\"\n]\n</code></pre> <p><code>reissue &lt;name&gt; &lt;amount&gt; &lt;address&gt; &lt;change_address&gt; &lt;reissuable&gt; &lt;units&gt;</code> - reissue token and/or update infromation about it (for example change number of units or reissuability)</p> <pre><code>[\n    \"0bcd37b40b79608f582a0fb17666f5c639d79acf72e4d5ce25c3726b3f7fea33\"\n]\n</code></pre> <p><code>listtokens</code> - returns list of all existing tokens</p> <pre><code>[\n    \"CHA\"\n]\n</code></pre> <p><code>gettokendata &lt;token&gt;</code> - returns information about tocken</p> <pre><code>{\n    \"name\": \"CHA\",\n    \"amount\": 1000000000.00000000,\n    \"units\": 8,\n    \"reissuable\": 1\n}\n</code></pre> <p><code>listtokenbalancesbyaddress &lt;address&gt;</code> - return all token balances for specified address</p> <pre><code>{\n    \"CHA\": 45731.24990000\n}\n</code></pre> <p><code>listaddressesbytoken &lt;token&gt;</code> - returns list of addresses/balances which hold specified token</p> <pre><code>{\n    \"cbLnN9J9wuPVzkqeTjzq9efRBSxTHJGh2\": 45731.24990000,\n    \"chEy59XfADWu5LspUvN9KYbaggTb3thmr\": 5138.96400000,\n    \"cmyLEGXAxzHLNEuj8wTiXbCzLR4Uaon79\": 10277.92800000,\n    \"cqDW4apwJi6QsHN3q3h5LMXWw1LgtaWgz\": 3.01100000,\n    \"cqS79DH5SGqrNGjKVDfHQLGCsBxYKMp4j\": 25522.00000000,\n    \"cr1m9cry8yhjUzBLhNxbvQsmqc1u7TaWD\": 4079.46780000,\n    \"crqLZGi82SJdVukvvcTfRpsmkpCx4fX4K\": 108874.53530000,\n    \"cswvLxmJJJCBNoVW3U7YNqLDNS7i9d6bx\": 3.00000000,\n    \"ctUYjQP8BBQwTFgJZebnxoiAqsF11DmXE\": 94700.49149998,\n    \"cud4EpNGfSqecAdB3FH6x6wvNfVEL2iMn\": 1.00000000,\n    \"cvmj3GNV4DE8Ms8yuKMGLHZDc88pr8Gzv\": 1000.00000000,\n    \"cvwTDCqFshmF1Xnqo1yj29TG8GQwyUHg4\": 27703.98720000,\n    \"cwA5otMB4qCzvFiERcBFj6JdaZ2Vvykv7\": 1000000.00000000,\n    \"cwKUUoZUw2DbXu7NWfXKySkSUa9WnRqR6\": 12801.75300000,\n    \"cwufjbDrozt6n5up1vSchveokeoXV9L82\": 221074.64239996,\n    \"cxemToRTChASMY85KSS8rfHHn4YnuEpbJ\": 8811.66599998,\n    \"cxrS24CN53HUkGHzZUybHnqC8hzfBH562\": 11.88460509,\n    \"czEAcXbh2nqBSjSrV3dYFWATrTxvAGcBh\": 14.00000000,\n    \"cX6LWrCX28etVmwdTaWX6X7J8pxBqLgF3u\": 38128.91369999,\n    \"cX6SfVXJMHSF6e3xrzcGkcpSdu9ETBZtzr\": 127377.29239999,\n    \"cX7BYLcxQpt3CANC3KPL8FaLCRDFDQRdCD\": 27979.77800000,\n    ...\n}\n</code></pre>"},{"location":"staking/","title":"Staking","text":"<p>Chavinci utilises Proof-of-Stake consensus model which allows user to validate new blocks by holding coins in their full node.</p>"},{"location":"staking/#full-node","title":"Full node","text":"<p>You can check full node guide for setup instructions and RPC for available commands to interact with your node.</p> <p>For staking with full node you must add <code>staking=1</code> param to your config file (or launch node with <code>-staking</code> flag). Once your node fully synced and running, you can get new address using <code>getnewaddress</code> command and send Chavinci to it. After that your node will start validation process and you will be receiving rewards after each validated block.</p>"},{"location":"staking/#desktop-wallet","title":"Desktop wallet","text":"<p>For staking in desktop wallet first you should go to <code>Receive</code> tab and generate deposit address.</p> <p></p> <p>After clicking <code>Request payment</code> button wallet will generate and display your address.</p> <p></p> <p>Once you received coins to your wallet, you can go to <code>Overview</code> page and click <code>Start staking</code>. Once coins you sent to wallet reach their maturity (60 blocks) wallet will start validation process and you will be receiving rewards after each validated block.</p> <p></p>"},{"location":"blog/","title":"Home","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/posts/how-to-use/","title":"Changing the colors","text":""},{"location":"blog/posts/how-to-use/#how-to-useing-blog","title":"how to useing blog","text":""}]}